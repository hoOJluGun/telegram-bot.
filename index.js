require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');
const Cloudflare = require('cloudflare');

// =================================================================
// 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï
// =================================================================

const {
  BOT_TOKEN,
  ADMIN_CHAT_ID,
  CLOUDFLARE_API_TOKEN,
  CLOUDFLARE_ACCOUNT_ID,
  DEFAULT_IP = '45.130.41.157',
} = process.env;

if (!BOT_TOKEN || !CLOUDFLARE_API_TOKEN || !CLOUDFLARE_ACCOUNT_ID) {
  console.error('–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã (BOT_TOKEN, CLOUDFLARE_API_TOKEN, CLOUDFLARE_ACCOUNT_ID).');
  process.exit(1);
}

// =================================================================
// 2. –•–†–ê–ù–ò–õ–ò–©–ï (Storage) –∏ –°–û–°–¢–û–Ø–ù–ò–ï (State)
// =================================================================

const applicationsFile = path.join(__dirname, 'applications.json');
const stateFile = path.join(__dirname, 'state.json');

const readJsonSafe = (filePath, fallback = {}) => {
  try {
    if (fs.existsSync(filePath)) {
      return JSON.parse(fs.readFileSync(filePath, 'utf8'));
    }
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, e);
  }
  return fallback;
};

const saveJsonSafe = (filePath, data) => {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, e);
  }
};

const applications = readJsonSafe(applicationsFile);
const domainState = readJsonSafe(stateFile); // In-memory state for multi-step operations

const saveApplications = () => saveJsonSafe(applicationsFile, applications);
const saveState = () => saveJsonSafe(stateFile, domainState);

// =================================================================
// 3. –î–ï–ú–û-–†–ï–ñ–ò–ú –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
// =================================================================

const hasAdmins = Object.values(applications).some(user => user.admin === true);
const DEMO_MODE = !hasAdmins;

function isUserAdmin(userId) {
  return DEMO_MODE || applications[userId]?.admin === true;
}

const requireAdmin = (ctx, next) => {
  if (isUserAdmin(ctx.from.id)) {
    return next();
  }
  return ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
};

// =================================================================
// 4. –°–ï–†–í–ò–°–´ (Cloudflare)
// =================================================================

const cf = new Cloudflare({ token: CLOUDFLARE_API_TOKEN });

const findZoneByName = async (domain) => {
  const { result } = await cf.zones.list({ name: domain });
  return result[0];
};

const createZone = async (domain) => {
  const { result } = await cf.zones.create({ name: domain, account: { id: CLOUDFLARE_ACCOUNT_ID } });
  return result;
};

const readZone = async (zoneId) => {
    const { result } = await cf.zones.read(zoneId);
    return result;
};

const listDns = async (zoneId) => {
    const { result } = await cf.dnsRecords.list({ zone_id: zoneId });
    return result;
};

const addARecord = async (zoneId, name, content, proxied = true) => {
  await cf.dnsRecords.create(zoneId, { type: 'A', name, content, proxied, ttl: 3600 });
};

// =================================================================
// 5. –õ–û–ì–ò–ö–ê –ë–û–¢–ê (Handlers)
// =================================================================

const bot = new Telegraf(BOT_TOKEN);

// --- –ö–æ–º–∞–Ω–¥—ã ---

bot.command('start', async (ctx) => {
  const userId = ctx.from.id;

  if (!applications[userId]) {
    applications[userId] = {
      id: userId,
      status: 'new',
      username: ctx.from.username || '–ù–µ—Ç –∏–º–µ–Ω–∏',
      firstName: ctx.from.first_name || '',
      lastName: ctx.from.last_name || '',
      timestamp: new Date().toISOString(),
      admin: false,
    };
    saveApplications();
  }

  if (DEMO_MODE) {
    await ctx.reply(
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' +
      'ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ **–¥–µ–º–æ-—Ä–µ–∂–∏–º–µ**, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. ' +
      '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π `/macedon <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>`.',
      { parse_mode: 'Markdown' }
    );
  }

  let keyboard;
  let message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!';

  if (isUserAdmin(userId)) {
    message = '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:';
    keyboard = [['–ú–æ–∏ –¥–æ–º–µ–Ω—ã', '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω'], ['–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–æ–∫', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']];
  } else if (applications[userId]?.status === 'approved') {
    keyboard = [['–ú–æ–∏ –¥–æ–º–µ–Ω—ã', '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω'], ['–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–æ–∫']];
  } else if (applications[userId]?.status === 'pending') {
    message = '‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.';
  } else {
    message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.';
    keyboard = [['–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É']];
  }

  return ctx.reply(message, keyboard ? Markup.keyboard(keyboard).resize() : undefined);
});

bot.command('macedon', (ctx) => {
  if (!DEMO_MODE && !isUserAdmin(ctx.from.id)) {
    return ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
  }

  const parts = ctx.message.text.split(/\s+/);
  const targetId = Number(parts[1]);

  if (!targetId || isNaN(targetId)) {
    return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /macedon 123456789');
  }
  if (!applications[targetId]) {
    return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/start).`);
  }
  if (applications[targetId].admin === true) {
    return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetId} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`);
  }

  applications[targetId].admin = true;
  saveApplications();
  ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetId} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.`);
});

// –°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –µ–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
const showAdminPanel = async (ctx) => {
  await ctx.reply('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'admin_list_users' }],
        [{ text: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data: 'admin_manage_admins' }],
      ],
    },
  });
};

bot.command('admin', (ctx) => requireAdmin(ctx, () => showAdminPanel(ctx)));

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (Hears) ---

bot.hears('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω', async (ctx) => {
  const userId = ctx.from.id;
  if (!isUserAdmin(userId) && applications[userId]?.status !== 'approved') {
    return ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
  }
  domainState[userId] = { awaitingDomain: true };
  saveState();
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com):', {
    reply_markup: { inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_bind_domain' }]] },
  });
});

bot.hears('–ú–æ–∏ –¥–æ–º–µ–Ω—ã', async (ctx) => {
  const userId = String(ctx.from.id);
  if (!isUserAdmin(ctx.from.id) && applications[userId]?.status !== 'approved') {
    return ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
  }

  const userDomains = Object.entries(applications.domains || {})
    .filter(([, data]) => data.ownerId === userId)
    .map(([domain, data]) => `‚Ä¢ \`${domain}\` (${data.verified ? '‚úÖ –∞–∫—Ç–∏–≤–µ–Ω' : '‚è≥ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'})`);

  if (userDomains.length === 0) {
    return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
  }
  return ctx.replyWithMarkdown(`–í–∞—à–∏ –¥–æ–º–µ–Ω—ã:\n${userDomains.join('\n')}`);
});

bot.hears('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', async (ctx) => {
  const userId = ctx.from.id;
  if (applications[userId]?.status === 'pending' || applications[userId]?.status === 'approved') {
    return ctx.reply('–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ –≤—ã —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω—ã.');
  }
  return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É.');
});

bot.hears('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–æ–∫', async (ctx) => {
  const userId = ctx.from.id;
  if (!isUserAdmin(userId) && applications[userId]?.status !== 'approved') {
    return ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
  }
  return ctx.reply('–†–∞–∑–¥–µ–ª "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–æ–∫" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
});

bot.hears('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', (ctx) => requireAdmin(ctx, () => showAdminPanel(ctx)));

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (Actions) ---

bot.action(/^approve_(\d+)$/, (ctx) => requireAdmin(ctx, async () => {
    const targetId = ctx.match[1];
    if (applications[targetId]) {
        applications[targetId].status = 'approved';
        saveApplications();
        await ctx.telegram.sendMessage(targetId, '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.');
        await ctx.editMessageText(`‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç @${applications[targetId].username} –æ–¥–æ–±—Ä–µ–Ω–∞.`);
    } else {
        await ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
}));

bot.action(/^reject_(\d+)$/, (ctx) => requireAdmin(ctx, async () => {
    const targetId = ctx.match[1];
    if (applications[targetId]) {
        applications[targetId].status = 'rejected';
        saveApplications();
        await ctx.telegram.sendMessage(targetId, '‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
        await ctx.editMessageText(`‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç @${applications[targetId].username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
    } else {
        await ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
}));

bot.action('cancel_bind_domain', async (ctx) => {
  delete domainState[ctx.from.id];
  saveState();
  await ctx.editMessageText('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
});

bot.action(/^verify_domain_(.+)$/, async (ctx) => {
  const userId = ctx.from.id;
  const domain = ctx.match[1];

  if (!isUserAdmin(userId) || !domainState[userId]?.zoneId) {
    return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.');
  }

  const { zoneId, nameservers } = domainState[userId];
  try {
    const zone = await readZone(zoneId);
    if (zone.status !== 'active') {
      return ctx.reply(
        `–î–æ–º–µ–Ω ${domain} –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ NS —É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n` +
        nameservers.map((ns, i) => `${i + 1}. ${ns}`).join('\n') +
        `\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5‚Äì10 –º–∏–Ω—É—Ç.`,
        { reply_markup: { inline_keyboard: [[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: `verify_domain_${domain}` }]] } }
      );
    }

    applications.domains = applications.domains || {};
    applications.domains[domain] = { ownerId: String(userId), ownerUsername: ctx.from.username || '–ù–µ—Ç –∏–º–µ–Ω–∏', addedAt: new Date().toISOString(), active: true, verified: true, nameservers };
    saveApplications();

    delete domainState[userId];
    saveState();

    await ctx.reply(`–î–æ–º–µ–Ω ${domain} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`);
    await ctx.answerCbQuery();
  } catch (e) {
    console.error(`[Cloudflare] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–∞ ${domain} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, e.message);
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–º–µ–Ω–∞ ${domain}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
  }
});

// --- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º) ---

bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const message = ctx.message.text;

  // 1. –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–æ–º–µ–Ω–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è)
  if (domainState[userId]?.awaitingDomain) {
    const domain = message.trim().toLowerCase();
    if (!/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/.test(domain)) {
      return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ example.com:');
    }

    try {
      const zone = await createZone(domain);
      await addARecord(zone.id, domain, DEFAULT_IP, true);
      await addARecord(zone.id, 'www', DEFAULT_IP, true);
      await addARecord(zone.id, '*', DEFAULT_IP, true);

      domainState[userId] = { domain, zoneId: zone.id, nameservers: zone.name_servers, ipAddress: DEFAULT_IP };
      saveState();

      return ctx.reply(
        `–î–æ–º–µ–Ω ${domain} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Cloudflare!\n\n` +
        `–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ NS-–∑–∞–ø–∏—Å–∏ —É –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n` +
        zone.name_servers.map((ns, i) => `${i + 1}. ${ns}`).join('\n') +
        `\n\n–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NS-–∑–∞–ø–∏—Å–µ–π (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤) –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å".`,
        { reply_markup: { inline_keyboard: [[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `verify_domain_${domain}` }]] } }
      );
    } catch (error) {
      console.error(`[Cloudflare] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ ${domain} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
      const msg = error.message || '';
      if (msg.includes("1061") || msg.includes("already exists")) {
        return ctx.reply(`–î–æ–º–µ–Ω ${domain} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Cloudflare. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.`);
      }
      return ctx.reply(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞: ${error.message}`);
    }
  }

  // 2. –õ–æ–≥–∏–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
  if (applications[userId]?.status === 'new' || applications[userId]?.status === 'rejected') {
    if (!ADMIN_CHAT_ID) {
      return ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
    }

    applications[userId].status = 'pending';
    applications[userId].message = message;
    saveApplications();

    await ctx.telegram.sendMessage(
      ADMIN_CHAT_ID,
      `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @${applications[userId].username} (${userId}):\n${message}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–î–æ–±–∞–≤–∏—Ç—å', callback_data: `approve_${userId}` }, { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${userId}` }],
          ],
        },
      }
    );
    return ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.');
  }
});

// =================================================================
// 6. –ó–ê–ü–£–°–ö –ë–û–¢–ê
// =================================================================

bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err);
});

(async () => {
  try {
    if (DEMO_MODE) {
      console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –î–ï–ú–û-–†–ï–ñ–ò–ú–ï.');
    }
    await bot.launch();
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –µ–¥–∏–Ω–æ–º —Ñ–∞–π–ª–µ!');
  } catch (err) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
  }
})();

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));