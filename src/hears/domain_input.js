const db = require("../storage/db");
const isValidUrl = require("../utils/validateUrl");

const MEDIA_TYPES = new Set([
  "photo","video","video_note","voice","audio","document","sticker","animation"
]);

function extractUrls(text){
  const raw = String(text||"").split(/[\s\n\r\t]+/).filter(Boolean);
  const cleaned = raw.map(t => t.replace(/^[(),.;:!?\[\]{}<>'"¬´¬ª]+|[(),.;:!?\[\]{}<>'"¬´¬ª]+$/g, ""));
  const uniq = Array.from(new Set(cleaned.filter(Boolean)));
  return uniq.filter(s => s.startsWith("http://") || s.startsWith("https://"));
}
function looksLikeCommand(text){
  return /^\s*\/\w+/.test(String(text||""));
}

module.exports.register = async (bot) => {
  bot.on(["text","photo","video","video_note","voice","audio","document","sticker","animation"], async (ctx, next) => {
    const userId = ctx.from.id;
    const u = db.getUser(userId) || {};
    const awaiting = ctx.app?.state?.awaitingApp?.[userId];

    // –∂–¥—ë–º –∑–∞—è–≤–∫—É?
    if (awaiting) {
      const m = ctx.message;
      const kind = m?.photo ? "photo" :
                   m?.video ? "video" :
                   m?.video_note ? "video_note" :
                   m?.voice ? "voice" :
                   m?.audio ? "audio" :
                   m?.document ? "document" :
                   m?.sticker ? "sticker" :
                   m?.animation ? "animation" : "text";
      if (MEDIA_TYPES.has(kind)) {
        await ctx.app.ui.show(ctx,
          "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.\n" +
          "–ó–∞–ª–µ–π—Ç–µ –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ **—Å—Å—ã–ª–∫—É** (http/https) –≤ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏.",
        );
        return;
      }

      const text = (m && m.text) ? String(m.text).trim() : "";
      if (!text) {
        await ctx.app.ui.show(ctx, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É **—Ç–µ–∫—Å—Ç–æ–º**.");
        return;
      }
      // –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã
      if (looksLikeCommand(text)) {
        await ctx.app.ui.show(ctx, "‚õî –ö–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞—è–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.");
        return;
      }
      // –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ ‚Äî –≤–∞–ª–∏–¥–∏—Ä—É–µ–º; —Ö—Ä–∞–Ω–∏–º –≤—Å—ë —Ä–∞–≤–Ω–æ –∫–∞–∫ –µ–¥–∏–Ω—ã–π text
      const urls = extractUrls(text);
      const invalid = urls.filter(u => !isValidUrl(u));
      if (invalid.length) {
        await ctx.app.ui.show(ctx,
          "‚ö†Ô∏è –≠—Ç–∏ —Å—Å—ã–ª–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:\n" +
          invalid.map(s => `‚Ä¢ ${s}`).join("\n") +
          "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç (http/https) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞."
        );
        return;
      }

      if (db.hasApplication(userId)) {
        await ctx.app.ui.show(ctx, "‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
        ctx.app.state.awaitingApp[userId] = false;
        return;
      }

      const isBootstrap = !ctx.app.admin?.hasConfiguredAdmin;
      const status = isBootstrap ? "approved" : "pending";
      db.createApplication(userId, text, status);
      if (isBootstrap) db.setRole(userId, "worker");

      ctx.app.state.awaitingApp[userId] = false;

      if (isBootstrap) {
        await ctx.app.ui.show(ctx,
          "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n–†–µ–∂–∏–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –º–µ–Ω—é.",
          { reply_markup: { inline_keyboard: [[{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "open_main_menu_bootstrap" }]] } }
        );
        bot.action("open_main_menu_bootstrap", async (aCtx) => {
          const kb = [
            [{ text: "üìå –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data: "service_open" }],
            [{ text: "üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data: "links_open" }],
            [{ text: "‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data: "admin_open" }],
          ];
          await aCtx.app.ui.show(aCtx, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", { reply_markup: { inline_keyboard: kb } });
          await aCtx.answerCbQuery().catch(()=>{});
        });
      } else {
        await ctx.app.ui.show(ctx,
          "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\nüïí –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.",
          { reply_markup: { inline_keyboard: [[{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "open_main_menu_user" }]] } }
        );
        bot.action("open_main_menu_user", async (aCtx) => {
          const kb = [
            [{ text: "üìå –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data: "service_open" }],
            [{ text: "üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data: "links_open" }],
          ];
          await aCtx.app.ui.show(aCtx, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", { reply_markup: { inline_keyboard: kb } });
          await aCtx.answerCbQuery().catch(()=>{});
        });
      }
      return;
    }

    // –µ—Å–ª–∏ –∑–∞—è–≤–∫—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ‚Äî —Å–æ–æ–±—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
    const app = db.getApplication(userId);
    if (app) {
      if (app.status === "pending")      await ctx.app.ui.show(ctx, "üïí –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
      else if (app.status === "approved")await ctx.app.ui.show(ctx, "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –ù–∞–±–µ—Ä–∏—Ç–µ /start –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ —Ä–∞–±–æ—Ç–µ.");
      else                               await ctx.app.ui.show(ctx, "‚õî –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");
      return;
    }

    // –ø–∏—à–µ—Ç –¥–æ /start ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º
    await ctx.app.ui.show(ctx, "üëã –ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –Ω–∞—á–Ω–∏—Ç–µ —Å /start ‚Äî –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –∑–∞—è–≤–∫—É.");
  });
};
