const retryRequest = async (fn, maxRetries = 3, baseDelay = 1000) => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      if (error.code === 429 && error.response?.parameters?.retry_after) {
        const retryAfter = error.response.parameters.retry_after * 1000;
        console.log(`[retryRequest] –û—à–∏–±–∫–∞ 429, –∂–¥–µ–º ${retryAfter} –º—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1}`);
        await new Promise((resolve) => setTimeout(resolve, retryAfter));
        continue;
      }
      console.error(`[retryRequest] –û—à–∏–±–∫–∞: ${error.message}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}`);
      if (attempt === maxRetries) throw error;
      await new Promise((resolve) => setTimeout(resolve, baseDelay * attempt));
    }
  }
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
};

async function logDnsRecords(cf, zoneId, domain, ctx) {
  try {
    const records = await cf.dnsRecords.browse(zoneId);
    if (!records || !records.result) {
      await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è ${domain}`);
      return;
    }
    let out = `üìú DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è ${domain}:\n`;
    for (const r of records.result) {
      out += `‚Ä¢ ${r.type} ${r.name} ‚Üí ${r.content} (TTL ${r.ttl})\n`;
    }
    await ctx.reply(out);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DNS:', e.message);
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DNS-–∑–∞–ø–∏—Å–µ–π: ${e.message}`);
  }
}

module.exports = {
  retryRequest,
  logDnsRecords,
};
