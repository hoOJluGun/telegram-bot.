const { domainState } = require('../storage/state');
const { applications, saveApplications } = require('../storage/applications');
const { retryRequest } = require('../utils/helpers');
const { readZone, listDns } = require('../services/cloudflare');
function isAdminId(id) { return applications[id]?.admin === true; }
module.exports = { action: /^verify_domain_(.+)$/, handler: async (ctx) => {
  const userId = ctx.from.id; const domain = ctx.callbackQuery.data.replace('verify_domain_', '');
  if (!isAdminId(userId) || !domainState[userId]?.zoneId) { await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.'); return; }
  const { zoneId, nameservers } = domainState[userId]; const ipAddress = domainState[userId]?.ipAddress || '45.130.41.157';
  try {
    const zone = await readZone(zoneId);
    if (zone.status !== 'active') {
      await retryRequest(() => ctx.reply(
        `–î–æ–º–µ–Ω ${domain} –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ NS —É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n` +
        nameservers.map((ns, i) => `${i + 1}. ${ns}`).join('\n') +
        `\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5‚Äì10 –º–∏–Ω—É—Ç.`,
        { reply_markup: { inline_keyboard: [[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: `verify_domain_${domain}` }]] } }
      ));
      return;
    }
    applications.domains = applications.domains || {};
    applications.domains[domain] = { ownerId: String(userId), ownerUsername: ctx.from.username || '–ù–µ—Ç –∏–º–µ–Ω–∏', addedAt: new Date().toISOString(), active: true, verified: true, nameservers };
    saveApplications();
    const records = await listDns(zoneId); let out = `üìú DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è ${domain}:\n`; for (const r of records) out += `‚Ä¢ ${r.type} ${r.name} ‚Üí ${r.content} (TTL ${r.ttl})\n`; await ctx.reply(out);
    await retryRequest(() => ctx.reply(
      `–î–æ–º–µ–Ω ${domain} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n` +
      `A-–∑–∞–ø–∏—Å–∏ –Ω–∞ IP: ${ipAddress}.\n` +
      `NS-–∑–∞–ø–∏—Å–∏:\n` +
      nameservers.map((ns, i) => `${i + 1}. ${ns}`).join('\n') +
      `\n\n–î–æ–º–µ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Å—Å—ã–ª–∫–∞—Ö.`
    ));
    delete domainState[userId]; await ctx.answerCbQuery();
  } catch (e) {
    await retryRequest(() => ctx.reply(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –¥–æ–º–µ–Ω–∞ ${domain}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DNS –∏–ª–∏ API-—Ç–æ–∫–µ–Ω.`,
      { reply_markup: { inline_keyboard: [[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: `verify_domain_${domain}` }]] } }
    ));
  }
} };
