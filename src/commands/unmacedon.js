const { withTyping, runWithProgress, escapeMdV2 } = require("../utils/effects");
const db = require("../storage/db");

module.exports.register = async (bot) => {
  bot.command("unmacedon", async (ctx) => {
    // –°–Ω–∏–º–∞—Ç—å —Ä–æ–ª—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º (–∫—Ä–æ–º–µ bootstrap-—Ä–µ–∂–∏–º–∞, –≥–¥–µ –∞–¥–º–∏–Ω–æ–≤ –µ—â—ë –Ω–µ—Ç)
    if (ctx.app.admin.hasConfiguredAdmin && !ctx.app.admin.requireAdmin()) return;

    const raw = (ctx.message && ctx.message.text) || "";
    const arg = raw.split(" ").slice(1).join(" ").trim();

    if (!/^\d+$/.test(arg)) {
      await ctx.app.ui.show(ctx, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/unmacedon <user_id>", {
        reply_markup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "service_open" }]] }
      });
      return;
    }
    const targetId = Number(arg);

    await withTyping(ctx, async () => {
      const steps = Array.from({ length: 4 }, () => 160);
      await runWithProgress(ctx, steps, { render: ({ pct }) => `üßπ –°–Ω–∏–º–∞—é –ø—Ä–∞–≤–∞... ${pct}%` });
    }, { action: "typing" });

    // —Å–Ω–∏–º–∞–µ–º —Ä–æ–ª—å admin –≤ –ë–î
    db.setRole(targetId, "admin", false);

    const body = `üßπ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã: \`${escapeMdV2(String(targetId))}\`.`;
    await ctx.app.ui.show(ctx, body, {
      parse_mode: "MarkdownV2",
      reply_markup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "service_open" }]] }
    });
  });
};
